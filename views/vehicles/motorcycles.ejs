<!-- Main content -->
<section class="content" id="lists">
	<!-- Small boxes (Stat box) -->
	<div class="row">
		<div :class="{ 'col-lg-12': !motorDetail, 'col-lg-6': motorDetail }">
			<div class="box">
				<div class="box-header">
					<div class="box-tools">
						<div class="row">
							<div class="col-sm-2">
								<select v-model="perPage" class="login_form">
									<option value="10">10</option>
									<option value="25">25</option>
									<option value="50">50</option>
									<option value="100">100</option>
								</select>
							</div>
							<div class="col-sm-10">
								<input type="text" name="table_search" class="login_form input-sm pull-right" style="width: 150px;" placeholder="motorcyclei" v-model="searchKey"/>
								<a href="#" @click.prevent="add" class="btn btn-sm btn-success pull-right"><i class="fa fa-plus"></i></a>
							</div>
						</div>
					</div>
				</div>
				<div class="box-body">
					<table class="table table-bordered">
						<tr>
							<th style="width: 50px" class="text-center"># <a href="" @click.prevent="sort('no')" class="pull-right"><i class="fa fa-arrows-v"></i></a></th>
							<th class="text-center">Plat Nomor <a href="" @click.prevent="sort('number')" class="pull-right"><i class="fa fa-arrows-v"></i></a></th>
							<th class="text-center">Merk <a href="" @click.prevent="sort('merk')" class="pull-right"><i class="fa fa-arrows-v"></i></a></th>							
							<th class="text-center">Tipe <a href="" @click.prevent="sort('type')" class="pull-right"><i class="fa fa-arrows-v"></i></a></th>
							<th class="text-center">Status</th>
							<th style="width: 100px" class="text-center">Jam Masuk <a href="" @click.prevent="sort('in')" class="pull-right"><i class="fa fa-arrows-v"></i></a></th>
							<th style="width: 100px" class="text-center">Tanggal <a href="" @click.prevent="sort('create_at')" class="pull-right"><i class="fa fa-arrows-v"></i></a></th>
							<th></th>
						</tr>
						<tr v-for="(o, i) in sortfiltered_motorcycle">
							<td class="text-center" v-html="o.no"></td>
							<td v-html="o.number"></td>
							<td v-html="o.merk"></td>
							<td v-html="o.type"></td>
							<td v-html="o.status"></td>
							<td class="text-center" v-html="o.in"></td>
							<td class="text-center" v-html="o.create_at"></td>
							<td class="text-center">
								<a href="" @click.prevent="edit(o)" class="btn btn-xs btn-primary" v-if="o.status==='Keluar'">
									<i class="fa fa-sign-in"></i>
								</a>
								<a href="" @click.prevent="detail(o)" class="btn btn-xs btn-info"><i class="fa fa-info"></i></a>
								<a href="" @click.prevent="out(o)" class="btn btn-xs btn-danger"  v-if="o.status!=='Keluar'"><i class="fa fa-sign-out"></i></a>
							</td>
						</tr>
					</table>
				</div>					
				<div class="box-footer clearfix" v-if="!motorDetail">
					<ul class="pagination pagination-sm no-margin pull-right">
						<li><a href="#" @click.prevent="prevPage">&laquo;</a></li>
						<li v-for="p in totalPages"><a href="#" @click.prevent="page(p)" v-if="Math.abs(p - currentPage)<5||p==1||p==totalPages-1">{{ p }}</a></li>
						<li><a href="#" @click.prevent="nextPage">&raquo;</a></li>
					</ul>
				</div>
			</div>
		</div>
		<div class="col-lg-6" v-if="motorDetail">
			<div class="box">
				<div class="box-header">
					<h4 for="label" v-html="label"></h4>
				</div>
				<div class="box-body">
					<div class="row">
						<div class="col-lg-3">
							<label for="type">Tipe *</label>
							<select v-model="detailMotor.type" class="form-control" :disabled="disabled">
								<option v-for="t in type" :value="t">{{ t }}</option>
							</select>
						</div>
						<div class="col-lg-3">
							<label for="merk">Merek *</label>
							<input type="text" class="form-control" v-model="detailMotor.merk" :disabled="disabled">
						</div>						
						<div class="col-lg-3">
							<label for="volume">Plat Nomor *</label>
							<input type="text" class="form-control" v-model="detailMotor.number" :disabled="disabled">
						</div>
						<div class="col-lg-3">
							<label for="time_in">Jam Masuk</label>
							<input type="text" class="form-control" v-model="time_in" disabled>
						</div>
					</div>
					<div class="row" v-if="label==='Keluar'||label==='Detail'">
						<div class="col-lg-3">
							<label for="time_out">Jam Keluar</label>
							<input type="text" class="form-control" v-model="time_out" disabled>
						</div>
						<div class="col-lg-3">
							<label for="total_rate">Tarif</label>
							<input type="text" class="form-control" v-model="total_rate" disabled>
						</div>
					</div>
				</div>
				<div class="box-footer clearfix">
					<a href="" @click.prevent="close" class="btn btn-sm btn-danger pull-right"><i class="fa fa-times"></i> Tutup</a>
					<a href="" @click.prevent="save" class="btn btn-sm btn-primary pull-right"><i class="fa fa-save"></i> Simpan</a>
				</div>
			</div>
		</div>
	</div>
</section>
	<!-- /Main content -->
<script>
	var lists = new Vue({
		el: '#lists',
		data: {
			lists: [],
			detailMotor: {},
			disabled: false,
			type: [ 'Matik', 'Bebek', 'Moge' ],
			motorDetail: false,
			perPage: 10,
			searchKey: '',
			total: 0,
			currentSort:'no',
			currentSortDir: 'desc',
			pageSize:10,
			currentPage:1,
			hour_in: '',
			hour_out: '',
			time_in: '',
			time_out: '',
			rate: 1000,
			total_rate: 0,
			label: '',
			date: '',
			persen: 0,
			benefits: 0
		},
		watch: {
			perPage: {
				immediate: true,
				deep: true,
				handler(nv) {
				if (nv==0) return;
				this.pageSize = nv;
				}
			},
			detailMotor: {
				immediate: true,
				deep: true,
				handler(nv) {
					if (_.isEmpty(nv)) return;

					if (!_.isEmpty(nv.in)) this.time_in = nv.in; 
					if (this.label==='Detail') {
						if (!_.isEmpty(nv.out)) this.time_out = nv.out;
						else this.time_out = "";
					}
					if (this.label==='Edit') this.time_out = "";
				}
			}
		},
		computed: {
			totalPages() {
        return Math.ceil(this.total / this.pageSize);
      },
			sortfiltered_motorcycle() {
				return this.lists.sort((a,b) => {
					let modifier = 1;
					if(this.currentSortDir === 'asc') modifier = -1;
					if(a[this.currentSort] < b[this.currentSort]) return -1 * modifier;
          if(a[this.currentSort] > b[this.currentSort]) return 1 * modifier;
          return 0;
				}).filter((row, index) => {
          let start = (this.currentPage-1)*this.pageSize;
					let end = this.currentPage*this.pageSize;
					if (!_.isEmpty(this.searchKey)) {
						if (index >= start && index < end &&
							(_.includes(_.lowerCase(row.number), _.lowerCase(this.searchKey)) ||
								_.includes(_.lowerCase(row.merk), _.lowerCase(this.searchKey)) ||
								_.includes(_.lowerCase(row.type), _.lowerCase(this.searchKey)) ||
								_.includes(_.lowerCase(row.status), _.lowerCase(this.searchKey)) ||
								_.includes(row.in, this.searchKey) ||
								_.includes(row.create_at, this.searchKey)
							)
						) return true;
					}
					else {
						if (index >= start && index < end) return true;
					}          
        })
			}
		},
		methods: {
			addZero(i) {
				if (i < 10) {
					i = "0"+ i;
				}
				return i;
			},
			reload() {
				let vm = this;
				vm.time_in = '';
				vm.time_out = '';
				vm.rate = 1000;
				vm.total_rate = 0;
				vm.motorDetail = false;
				vm.detailMotor = {};
				vm.searchKey = '';
				axios.get('/motorcycles/lists').then((res) => {
					this.lists = res.data.data;
				})
			},
			sort(s) {
        //if s == current sort, reverse
        if(s === this.currentSort) {
          this.currentSortDir = this.currentSortDir==='asc'?'desc':'asc';
        }
        this.currentSort = s;
			},
			edit(o) {
				let vm = this, d = new Date();
				vm.label = 'Edit';
				vm.time_out = '';
				vm.motorDetail = true;
				vm.detailMotor = o;
				vm.rate = 1000;
				vm.total_rate = 0;
				vm.persen = 0;
				vm.benefits = 0;
				vm.disabled = true;

				vm.date = d.getFullYear()+"-"+vm.addZero(d.getMonth()+1)+"-"+vm.addZero(d.getDate());
			},
			detail(o) {
				let vm = this;
				vm.label = 'Detail';
				vm.time_out = '';
				vm.motorDetail = true;
				vm.detailMotor = o;
				vm.rate = 1000;
				vm.total_rate = 0;
				vm.persen = 0;
				vm.benefits = 0;
				vm.disabled = true;
			},
			out(o) {
				let vm = this, d = new Date(), str = o.in, hours = d.getHours(), res = str.substring(0,2),
				benefits = 0, persen = 0;
				vm.label = 'Keluar';
				if (res == vm.addZero(hours)) {
					vm.total_rate = 1000;
				}
				else {
					vm.total_rate = (vm.addZero(hours)-res) * 1000;
				}
				vm.time_out = vm.addZero(d.getHours())+":"+vm.addZero(d.getMinutes())+":"+vm.addZero(d.getSeconds());
				vm.motorDetail = true;
				vm.detailMotor = o;
				vm.disabled = true;

				if (o.type==='Matik') persen = 95;
				else if (o.type==='Bebek') persen = 98;
				else if (o.type==='Bebek') persen = 90;

				vm.persen = persen;
				vm.benefits = (vm.total_rate*persen)/100;
				vm.rate = vm.total_rate - vm.benefits;
				vm.date = d.getFullYear()+"-"+vm.addZero(d.getMonth()+1)+"-"+vm.addZero(d.getDate());
			},
			add() {
				let vm = this, d = new Date();
				vm.label = 'Masuk';
				vm.time_in = vm.addZero(d.getHours())+":"+vm.addZero(d.getMinutes())+":"+vm.addZero(d.getSeconds());
				vm.time_out = '';
				vm.motorDetail = true;
				vm.detailMotor = {};
				vm.rate = 1000;
				vm.total_rate = 0;
				vm.persen = 0;
				vm.benefits = 0;
				vm.disabled = false;

				vm.date = d.getFullYear()+"-"+vm.addZero(d.getMonth()+1)+"-"+vm.addZero(d.getDate());
			},
			save() {
				let vm = this, data = {
					label: vm.label,
					detailMotor: vm.detailMotor,
					time_in: vm.time_in,
					time_out: vm.time_out,
					date: vm.date,
					rate: vm.rate,
					total_rate: vm.total_rate,
					persen: vm.persen/100,
					benefits: vm.benefits
				}
				axios.post('motorcycles/save', data).then((res) => {
					if (res.data.result=='success') {
            vm.reload();
          }
				})
				.catch((error) => {
          console.log(error);
        })
			},
			close() {
				let vm = this;
				vm.time_in = '';
				vm.time_out = '';
				vm.rate = 1000;
				vm.total_rate = 0;
				vm.motorDetail = false;
				vm.detailMotor = {};
				vm.searchKey = '';
			},
			page(p) {
        this.currentPage = p;
      },
      prevPage() {
        if(this.currentPage > 1) this.currentPage--;
			},
			nextPage() {
        if(this.currentPage > 1) this.currentPage++;
			},
		},
		mounted() {
			let vm = this;
			vm.reload();
		}
	})
</script>